{"note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"A library for turning ruby collections into HTML tables.","google":"UA-38176585-1","name":"DataTable","body":"# DataTable\r\n[![Build Status](https://secure.travis-ci.org/veracross/data-table.png)](http://travis-ci.org/veracross/data-table)\r\n[![Code Climate](https://codeclimate.com/github/veracross/data-table.png)](https://codeclimate.com/github/veracross/data-table)\r\n\r\nDataTable renders collections (an array of hashes or ActiveRecord models) as HTML tables.\r\n\r\n## Install\r\n```ruby\r\ngem install data-table\r\n```\r\n\r\nor, in your Gemfile\r\n\r\n```ruby\r\ngem 'data-table'\r\n```\r\n\r\n### Basic Usage\r\n\r\nthe normal usage is to call the `DataTable.render()` method and pass it a collection.  The method also takes a block which can be used to configure the table.  The column method takes a symbol for the first parameter.  If the symbol matches a key in the @collection, then that value is printed in the cell.\r\n\r\n```ruby\r\nDataTable.render(@collection) do |t|\r\n  t.column :column_1, \"Title\"\r\n  t.column :column_2, \"Title 2\"\r\nend\r\n```\r\n\r\n### Custom Cell Renderer\r\n\r\nSometimes you want to use Ruby code to customize the value for a cell.  This can be done by passing a block to the .column method\r\n\r\n```ruby\r\nDataTable.render(@collection) do |t|\r\n   t.column :column_id, \"Title\" do |value, row, row_index, column, column_index|\r\n     \"The value is: #{value}\"\r\n   end\r\nend\r\n```\r\n\r\nYou don't need to pass in all of the block parameters; just the ones up to the one you need.\r\n\r\n**Tip** The column_id doesn't need to be an actual key in the collection.  You can just make up an arbitrary column id and use the block renderer to customize the value for a column.\r\n\r\n\r\n### All Table Configuration Options\r\n\r\n    id: the html id\r\n    title: the title of the data table\r\n    subtitle: the subtitle of the data table\r\n    css_class: an extra css class to get applied to the table\r\n    empty_text: the text to display of the collection is empty\r\n    display_header => false: hide the column headers for the data table\r\n    alternate_rows => false: turn off alternating of row css classes\r\n    alternate_cols => true: turn on alternating of column classes, defaults to false\r\n\r\n### Totals\r\n\r\nIt is possible to setup totals & subtotals.   Total columns take the name of the column that should be totaled.\r\n\r\nThey also take a default aggregate function name and/or a block\r\nIf only a default function is given, then it is used to calculate the total\r\nIf only a block is given then only it is used to calculated the total\r\nIf both a block and a function are given then the default aggregate function is called first then its result is passed into the block for further processing.\r\n\r\n```ruby\r\nDataTable.render(@collection) do |t|\r\n  t.column :column_1, \"Title\"\r\n  t.column :column_2, \"Title 2\"\r\n  t.column :column_3, \"Title 3\"\r\n\r\n  t.total :column_1, :sum\r\n  t.total :column_2 do |values|\r\n\r\n  end\r\n\r\n  t.total(:column_3, :sum) do |aggregate_total|\r\n    format_money(aggregate_total)\r\n  end\r\n\r\nend\r\n```\r\n\r\nPossible default functions: `:sum`, `:avg`, `:min`, `:max`\r\n\r\n\r\n### Sub Totals\r\n\r\nSubTotals work in a similar way to Totals.  The main difference is that you need to call group by to specificy the different subtotal groupings\r\n\r\n```ruby\r\nDataTable.render(@collection) do |t|\r\n  t.column :column_1, \"Title\"\r\n  t.column :column_2, \"Title 2\"\r\n  t.column :column_3, \"Title 3\"\r\n\r\n  t.group_by :column_1\r\n\r\n  t.subtotal :column_2, :sum\r\n\r\nend\r\n```\r\n\r\nIt is possible to use `group_by` on its own without subtotaling.\r\n\r\nYou can also combine subtotals & totals in the same table.\r\n\r\n## Credits\r\nNearly all of the code for this was written by @smerickson, and later gemified by @sixfeetover.\r\n\r\n## License\r\nCopyright (c) 2012-2013 Jeff Fraser (Veracross LLC) jfraser@breuer.com\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n"}